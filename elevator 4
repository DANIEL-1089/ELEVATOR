#include <iostream>
#include <ctime>
#include <wchar.h>
#include <Windows.h>
#include <algorithm>
#include <vector>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <cstring>
#include <conio.h>
#include <iomanip>
#include <process.h>
#include <Windows.h>
#include <time.h>
#include <ctime>
#include <cstdlib>
#include <typeinfo>
#include <fstream>
#include <thread>
#include <chrono>


using namespace std;
using namespace chrono;
using namespace this_thread;

int Delay = rand() % 1000 - 5000;

class person {
public:
    char estim;
    void estimate();
};
void person::estimate() {
    int mood = rand() % 1 - 5;
    if (mood == 1 - 2) {
        estim = '5';
    }
    else if (mood == 2 - 3) {
        estim = '4';
    }
    else if (mood == 3 - 4) {
        estim = '3';
    }
    else if (mood == 4 - 4.999F) {
        estim = '2';
    }
    else if (mood == 5) {
        estim = '1';
    }
}

class elevator : public person {
private:
    person pers1;
    const int minFloor = -15;
    int floor = 0;
    unsigned const int maxFloor = 15;
public :
    void elevatorfl() {
        if (floor < minFloor)
            abort;
        char floorMovement;
        cout << "\nEnter - 'u' to raise ";
        cout << "\nEnter - 'd' to reduce ";
        cin >> floorMovement;
        if (floorMovement == 'u') {
            elevatorUp(floor);
            this->floor == floorMovement;
        }
        else if (floorMovement == 'd') {
            elevatorDown(floor);
        }
        floor == floorMovement;
    }
    void elevatorUp(int &fl);
    void elevatorDown(int &fl);
    bool Legal(int& fl) {
        return fl >= minFloor;
    }
    friend class person;
};
void elevator::elevatorDown(int &fl) {
    int floor1;
    cout << "\nWhere do you want to go?(floor num) ";
    cin >> floor1;
    if (Legal(floor1) == true) {}
    else if (Legal(floor1) == false) {
        exit(0);
        abort;
        atexit(0);
        return;
    }
    if (floor1 > fl) {
        cout << "\nIt was necessary to choose 'u'";
    }
    else if (floor1 < fl) {
        cout << "\nThe elevator is coming";
        sleep_for(seconds(Delay));
        cout << "\nYour floor " << floor1;
        pers1.estimate();
        cout << "\nMy estimation: " << estim << endl;
        floor == floor1;
    }
}
void elevator::elevatorUp(int &fl) {
    int floor1;
    cout << "\nWhere do you want to go?(floor num) ";
    cin >> floor1;
    if (Legal(floor1) == true) {}
    else if (Legal(floor1) == false) {
        exit(0);
        abort;
    }
    if (floor1 < fl) {
        cout << "\nIt was necessary to choose 'd'";
    }
    else if (floor1 > fl) {
        cout << "\nThe elevator is coming";
        sleep_for(seconds(Delay));
        cout << "\nYour floor " << floor1;
        pers1.estimate();
        cout << "\nMy estimation: " << estim << endl;
        floor == floor1;
    }
}


int main() {
    elevator elevator1;
    while (true) {
        elevator1.elevatorfl(); 
    }
}
